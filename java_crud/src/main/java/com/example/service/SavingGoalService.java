package com.example.service;

import com.example.entity.Account;
import com.example.entity.SavingGoal;
import com.example.repository.AccountDAO;
import com.example.repository.SavingGoalDAO;
import com.example.repository.TransactionDAO;
import com.example.repository.UserDAO;

import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;

import org.springframework.stereotype.Service;

import java.util.*;

@Service
@Slf4j
@RequiredArgsConstructor
public class SavingGoalService {
    private final SavingGoalDAO savingGoalDAO;
    private final AccountDAO accountDAO;
    private final TransactionDAO transactionDAO;
    private final UserDAO userDAO;
    private final EmailService emailService;

    public Optional<SavingGoal> getById(UUID id) {
        return savingGoalDAO.findById(id);
    }

    public List<SavingGoal> getByUser(UUID userId) {
        return savingGoalDAO.findByUser(userId);
    }

    public List<SavingGoal> getAll() {
        return savingGoalDAO.findAll();
    }

    public boolean create(SavingGoal goal) {
        UUID goalId = UUID.randomUUID();
        UUID accountId = UUID.randomUUID();

        // T·∫°o t√†i kho·∫£n ƒëi k√®m goal
        Account account = new Account();
        account.setId(accountId);
        account.setUserId(goal.getUserId());
        account.setName(goal.getName());
        account.setType("Saving");
        account.setInitialBalance(0.0);

        // L∆∞u account v√†o DB
        int accountResult = accountDAO.insert(account);
        if (accountResult <= 0)
            return false;

        // G√°n accountId cho goal
        goal.setId(goalId);
        goal.setGoalAccountId(accountId);

        return savingGoalDAO.insert(goal) > 0;
    }

    public boolean update(UUID id, SavingGoal updated) {
        Optional<SavingGoal> goalOpt = savingGoalDAO.findById(id);
        if (goalOpt.isEmpty())
            return false;

        SavingGoal existing = goalOpt.get();

        updated.setId(id);
        updated.setGoalAccountId(existing.getGoalAccountId());

        // N·∫øu t√™n SavingGoal thay ƒë·ªïi ‚Üí c·∫≠p nh·∫≠t t√™n Account
        if (!existing.getName().equalsIgnoreCase(updated.getName())) {
            Optional<Account> accOpt = accountDAO.findById(existing.getGoalAccountId());
            accOpt.ifPresent(acc -> {
                acc.setName(updated.getName()); // ƒë·ªìng b·ªô t√™n
                accountDAO.update(acc);
            });
        }

        return savingGoalDAO.update(updated) > 0;
    }

    public boolean delete(UUID id) {
        Optional<SavingGoal> existingOpt = savingGoalDAO.findById(id);
        if (existingOpt.isEmpty())
            return false;

        SavingGoal sg = existingOpt.get();

        // X√≥a saving_goal tr∆∞·ªõc
        boolean deleted = savingGoalDAO.delete(id) > 0;

        if (deleted) {
            // Sau ƒë√≥ x√≥a lu√¥n account ƒëi k√®m
            String note = "Tr∆∞·ªõc ƒë√¢y thu·ªôc goal: " + sg.getName();
            transactionDAO.detachAccountAndNote(sg.getGoalAccountId(), note);
            accountDAO.delete(sg.getGoalAccountId());
        }

        return deleted;
    }

    public void checkGoalCompletion(UUID accountId) {
        Optional<SavingGoal> sgOpt = savingGoalDAO.findByAccountId(accountId);
        if (sgOpt.isEmpty())
            return;

        SavingGoal goal = sgOpt.get();

        // N·∫øu ƒë√£ ho√†n th√†nh ‚Üí b·ªè qua
        if (goal.isCompleted())
            return;

        Optional<Account> accOpt = accountDAO.findById(accountId);
        if (accOpt.isEmpty())
            return;

        double currentBalance = accOpt.get().getCurrentBalance(); // d√πng balance ƒë√£ t√≠nh tr∆∞·ªõc
        if (currentBalance >= goal.getTargetAmount()) {
            String userEmail = userDAO.findById(goal.getUserId())
                    .map(user -> user.getEmail())
                    .orElse("");
            if (userEmail.isBlank()) {
                log.warn("‚ö† Kh√¥ng c√≥ email ƒë·ªÉ g·ª≠i cho userId: " + goal.getUserId());
                return;
            }

            String subject = "üéØ M·ª•c ti√™u \"" + goal.getName() + "\" ƒë√£ ho√†n th√†nh";
            String body = "B·∫°n ƒë√£ ti·∫øt ki·ªám ƒë∆∞·ª£c " + currentBalance + " VNƒê cho m·ª•c ti√™u \"" + goal.getName() + "\".";

            emailService.sendBudgetWarning(userEmail, subject, body);

            // ‚úÖ ƒê√°nh d·∫•u ƒë√£ g·ª≠i
            goal.setCompleted(true);
            savingGoalDAO.updateCompletionStatus(goal.getId(), true);
        }
    }

}
